import React, { useState } from "react";
import dayjs from "dayjs";
import { ChevronLeft, ChevronRight, X } from "lucide-react";

interface CustomDateRangeModalProps {
  isOpen: boolean;
  onClose: () => void;
  onApply: (range: { startDate: Date; endDate: Date }) => void;
  initialRange?: { startDate: Date; endDate: Date };
}

export default function CustomDateRangeModal({
  isOpen,
  onClose,
  onApply,
  initialRange,
}: CustomDateRangeModalProps) {
  const [currentMonth, setCurrentMonth] = useState(dayjs());
  const [range, setRange] = useState<{ startDate: Date; endDate: Date }>(
    initialRange || { startDate: dayjs().startOf("isoWeek").toDate(), endDate: dayjs().endOf("isoWeek").toDate() }
  );
  const [selectingStart, setSelectingStart] = useState(true);

  if (!isOpen) return null;

  const start = dayjs(range.startDate);
  const end = dayjs(range.endDate);

  const handleDayClick = (day: dayjs.Dayjs) => {
    if (selectingStart) {
      setRange({ startDate: day.toDate(), endDate: day.toDate() });
      setSelectingStart(false);
    } else {
      if (day.isBefore(dayjs(range.startDate))) {
        setRange({ startDate: day.toDate(), endDate: range.startDate });
      } else {
        setRange({ ...range, endDate: day.toDate() });
      }
      setSelectingStart(true);
    }
  };

  const daysInMonth = () => {
    const firstDay = currentMonth.startOf("month").day();
    const days: (dayjs.Dayjs | null)[] = Array(firstDay).fill(null);
    for (let i = 1; i <= currentMonth.daysInMonth(); i++) {
      days.push(currentMonth.date(i));
    }
    return days;
  };

  const isInRange = (day: dayjs.Dayjs) => day.isSameOrAfter(start, "day") && day.isSameOrBefore(end, "day");

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/80 p-2">
      <div className="bg-[#1a1a1d] rounded-xl w-full max-w-md p-4">
        {/* Header */}
        <div className="flex justify-between items-center mb-4">
          <div className="text-white text-sm">
            {dayjs(range.startDate).format("DD MMM")} — {dayjs(range.endDate).format("DD MMM")}
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-white">
            <X />
          </button>
        </div>

        {/* Month Navigation */}
        <div className="flex justify-between items-center mb-2">
          <button
            onClick={() => setCurrentMonth(prev => prev.subtract(1, "month"))}
            className="px-2 py-1 bg-gray-600 rounded text-white hover:bg-gray-500"
          >
            <ChevronLeft className="w-4 h-4" />
          </button>
          <div className="text-white font-semibold">{currentMonth.format("MMMM YYYY")}</div>
          <button
            onClick={() => setCurrentMonth(prev => prev.add(1, "month"))}
            className="px-2 py-1 bg-gray-600 rounded text-white hover:bg-gray-500"
          >
            <ChevronRight className="w-4 h-4" />
          </button>
        </div>

        {/* Week Days */}
        <div className="grid grid-cols-7 text-xs text-gray-400 mb-1">
          {["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"].map(day => (
            <div key={day} className="text-center">{day}</div>
          ))}
        </div>

        {/* Days */}
        <div className="grid grid-cols-7 gap-1">
          {daysInMonth().map((day, idx) =>
            day ? (
              <button
                key={idx}
                onClick={() => handleDayClick(day)}
                className={`h-10 flex items-center justify-center rounded ${
                  isInRange(day) ? "bg-blue-600 text-white" : "text-white hover:bg-gray-700"
                }`}
              >
                {day.date()}
              </button>
            ) : (
              <div key={idx}></div>
            )
          )}
        </div>

        {/* Apply Button */}
        <div className="flex justify-end mt-4">
          <button
            onClick={() => onApply(range)}
            className="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700 text-white"
          >
            Применить
          </button>
        </div>
      </div>
    </div>
  );
}
