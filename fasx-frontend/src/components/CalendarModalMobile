// MonthCalendarModal.tsx
import React, { useState } from "react";
import dayjs from "dayjs";
import { ChevronLeft, ChevronRight } from "lucide-react";

interface MonthCalendarModalProps {
  isOpen: boolean;
  onClose: () => void;
  onApply: (startDate: Date, endDate: Date) => void;
  initialStartDate?: Date;
  initialEndDate?: Date;
}

export default function MonthCalendarModal({
  isOpen,
  onClose,
  onApply,
  initialStartDate,
  initialEndDate,
}: MonthCalendarModalProps) {
  const [currentMonth, setCurrentMonth] = useState(dayjs());
  const [startDate, setStartDate] = useState<Date | null>(initialStartDate || null);
  const [endDate, setEndDate] = useState<Date | null>(initialEndDate || null);

  if (!isOpen) return null;

  const daysInMonth = currentMonth.daysInMonth();
  const firstDayOfWeek = currentMonth.startOf("month").day(); // 0 = Sunday
  const weeks: (Date | null)[][] = [];
  let dayCounter = 1 - firstDayOfWeek;

  while (dayCounter <= daysInMonth) {
    const week: (Date | null)[] = [];
    for (let i = 0; i < 7; i++) {
      if (dayCounter < 1 || dayCounter > daysInMonth) {
        week.push(null);
      } else {
        week.push(currentMonth.date(dayCounter).toDate());
      }
      dayCounter++;
    }
    weeks.push(week);
  }

  const handleDateClick = (date: Date) => {
    if (!startDate || (startDate && endDate)) {
      setStartDate(date);
      setEndDate(null);
    } else if (startDate && !endDate) {
      if (dayjs(date).isBefore(dayjs(startDate))) {
        setEndDate(startDate);
        setStartDate(date);
      } else {
        setEndDate(date);
      }
    }
  };

  const isInRange = (date: Date) => {
    if (startDate && endDate) {
      return dayjs(date).isBetween(dayjs(startDate), dayjs(endDate), null, "[]");
    }
    return false;
  };

  return (
    <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4">
      <div className="bg-[#1a1a1d] rounded-xl p-4 w-full max-w-sm">
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <button
            onClick={() => setCurrentMonth(prev => prev.subtract(1, "month"))}
            className="p-2 rounded bg-[#2a2a2d] hover:bg-gray-700 text-gray-300"
          >
            <ChevronLeft className="w-4 h-4" />
          </button>
          <div className="text-white font-semibold">
            {currentMonth.format("MMMM YYYY")}
          </div>
          <button
            onClick={() => setCurrentMonth(prev => prev.add(1, "month"))}
            className="p-2 rounded bg-[#2a2a2d] hover:bg-gray-700 text-gray-300"
          >
            <ChevronRight className="w-4 h-4" />
          </button>
        </div>

        {/* Weekdays */}
        <div className="grid grid-cols-7 text-xs text-gray-400 mb-2 text-center">
          {["Su","Mo","Tu","We","Th","Fr","Sa"].map((d) => (
            <div key={d}>{d}</div>
          ))}
        </div>

        {/* Days */}
        <div className="grid grid-cols-7 gap-1">
          {weeks.flat().map((date, idx) => (
            <div
              key={idx}
              className={`h-10 flex items-center justify-center rounded cursor-pointer
                ${date ? "text-white" : "text-transparent"}
                ${date && dayjs(date).isSame(dayjs(), "day") ? "border border-blue-600" : ""}
                ${date && isInRange(date) ? "bg-blue-600" : ""}
              `}
              onClick={() => date && handleDateClick(date)}
            >
              {date ? dayjs(date).date() : ""}
            </div>
          ))}
        </div>

        {/* Buttons */}
        <div className="flex justify-end mt-4 gap-2">
          <button
            onClick={onClose}
            className="px-4 py-2 rounded bg-gray-600 hover:bg-gray-700 text-white"
          >
            Отмена
          </button>
          <button
            onClick={() => {
              if (startDate && endDate) {
                onApply(startDate, endDate);
                onClose();
              } else {
                alert("Выберите диапазон дат");
              }
            }}
            className="px-4 py-2 rounded bg-blue-600 hover:bg-blue-700 text-white"
          >
            Применить
          </button>
        </div>
      </div>
    </div>
  );
}
