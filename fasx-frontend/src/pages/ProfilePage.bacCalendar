import React, { useEffect, useState, useCallback, useRef } from 'react'
import {
  Timer,
  MapPin,
  Zap,
  Target,
  Plus,
  LogOut,
  ChevronLeft,
  ChevronRight,
  ChevronDown,
  Calendar
} from 'lucide-react'
import { useNavigate } from 'react-router-dom'
import dayjs from 'dayjs'
import isBetween from 'dayjs/plugin/isBetween'
import 'react-date-range/dist/styles.css'
import 'react-date-range/dist/theme/default.css'
import { DateRange } from 'react-date-range'



import IntensityZones from '../components/IntensityZones'
import TrainingLoadChart from "../components/TrainingLoadChart"
import WeeklySessions from "../components/WeeklySessions"
import RecentWorkouts from "../components/RecentWorkouts"
import ActivityTable from "../components/ActivityTable"
import AddWorkoutModal from "../components/AddWorkoutModal"
import { getUserProfile } from "../api/getUserProfile"

dayjs.extend(isBetween)

interface Workout {
  id: string
  name: string
  date: string
  duration: number
  type: string
  distance?: number | null
  zone1Min?: number
  zone2Min?: number
  zone3Min?: number
  zone4Min?: number
  zone5Min?: number
}

export default function ProfilePage() {
  const [name, setName] = useState("")
  const [loadingProfile, setLoadingProfile] = useState(true)
  const [workouts, setWorkouts] = useState<Workout[]>([])
  const [loadingWorkouts, setLoadingWorkouts] = useState(true)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [selectedMonth, setSelectedMonth] = useState(dayjs())
  const [yearDropdownOpen, setYearDropdownOpen] = useState(false)
  const [customRangeOpen, setCustomRangeOpen] = useState(false)
  const [customRange, setCustomRange] = useState<{startDate: Date; endDate: Date}>({
    startDate: new Date(),
    endDate: new Date(),
  })
  const navigate = useNavigate()
  const yearDropdownRef = useRef<HTMLDivElement>(null)
  const customRangeRef = useRef<HTMLDivElement>(null)

  // Закрытие дропдаунов по клику вне
  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (
        yearDropdownRef.current &&
        !yearDropdownRef.current.contains(event.target as Node)
      ) {
        setYearDropdownOpen(false)
      }
      if (
        customRangeRef.current &&
        !customRangeRef.current.contains(event.target as Node)
      ) {
        setCustomRangeOpen(false)
      }
    }
    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [])

  const fetchWorkouts = useCallback(async () => {
    try {
      const token = localStorage.getItem('token')
      const res = await fetch(`${import.meta.env.VITE_API_URL}/api/workouts/user`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      if (!res.ok) throw new Error("Ошибка загрузки тренировок")
      const data: Workout[] = await res.json()
      setWorkouts(data)
    } catch (err) {
      console.error("Ошибка:", err)
    } finally {
      setLoadingWorkouts(false)
    }
  }, [])

  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const data = await getUserProfile()
        setName(data.name || "Пользователь")
      } catch (err) {
        console.error("Ошибка профиля:", err)
      } finally {
        setLoadingProfile(false)
      }
    }

    fetchProfile()
    fetchWorkouts()
  }, [fetchWorkouts])

  const handleAddWorkout = (w: Workout) => {
    setWorkouts(prev => [w, ...prev])
  }

  const handleDeleteWorkout = (id: string) => {
    setWorkouts(prev => prev.filter(w => w.id !== id))
  }

  const handleLogout = () => {
    localStorage.removeItem('token')
    navigate('/')
  }

  // Навигация по месяцам
  const handlePrevMonth = () => setSelectedMonth(selectedMonth.subtract(1, 'month'))
  const handleNextMonth = () => setSelectedMonth(selectedMonth.add(1, 'month'))

  // Года для выбора
  const currentYear = dayjs().year()
  const years = Array.from({ length: 20 }, (_, i) => currentYear - i).reverse()

  // Фильтрация тренировок по выбранному периоду
  const filteredWorkouts = (() => {
    if (customRangeOpen) {
      const start = dayjs(customRange.startDate).startOf('day')
      const end = dayjs(customRange.endDate).endOf('day')
      return workouts.filter(w => dayjs(w.date).isBetween(start, end, null, '[]'))
    }
    return workouts.filter(w => dayjs(w.date).isSame(selectedMonth, 'month'))
  })()

  const totalDuration = filteredWorkouts.reduce((sum, w) => sum + w.duration, 0)
  const totalDistance = filteredWorkouts.reduce((sum, w) => sum + (w.distance || 0), 0)
  const hours = Math.floor(totalDuration / 60)
  const minutes = totalDuration % 60
  const totalTimeStr = `${hours}:${minutes.toString().padStart(2, '0')}`

  const intensiveSessions = filteredWorkouts.filter(w => {
    const zones = [
      w.zone1Min || 0,
      w.zone2Min || 0,
      w.zone3Min || 0,
      w.zone4Min || 0,
      w.zone5Min || 0
    ]
    const maxZone = zones.indexOf(Math.max(...zones)) + 1
    return [3,4,5].includes(maxZone)
  }).length

  return (
    <div className="min-h-screen bg-[#0e0e10] text-white px-4 py-6">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <img src="/profile.jpg" alt="Avatar" className="w-16 h-16 rounded-full object-cover" />
            <div>
              <h1 className="text-2xl font-bold text-white">
                {loadingProfile ? 'Загрузка...' : name}
              </h1>
              <p className="text-sm text-white flex items-center gap-1 cursor-pointer select-none"
                 onClick={() => setYearDropdownOpen(prev => !prev)}
                 aria-haspopup="listbox"
                 aria-expanded={yearDropdownOpen}
                 title="Выбрать год"
              >
                {selectedMonth.format('MMMM YYYY')}
                <ChevronDown className="w-4 h-4" />
              </p>

              {/* Выбор года */}
              {yearDropdownOpen && (
                <div ref={yearDropdownRef} className="absolute mt-1 bg-[#1a1a1d] border border-gray-700 rounded shadow max-h-48 overflow-auto z-30">
                  {years.map(year => (
                    <div
                      key={year}
                      onClick={() => {
                        setSelectedMonth(selectedMonth.year(year))
                        setYearDropdownOpen(false)
                        setCustomRangeOpen(false)
                      }}
                      className={`px-4 py-2 cursor-pointer hover:bg-[#007AFF] ${
                        selectedMonth.year() === year ? "bg-[#007AFF] text-white" : "text-gray-300"
                      }`}
                    >
                      {year}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <button
              onClick={() => setIsModalOpen(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded flex items-center"
            >
              <Plus className="w-4 h-4 mr-1" /> Добавить тренировку
            </button>
            <button
              onClick={handleLogout}
              className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-1 rounded flex items-center"
            >
              <LogOut className="w-4 h-4 mr-1" /> Выйти
            </button>
          </div>
        </div>

        {/* Период навигация */}
        <div className="flex items-center space-x-2">
          <button
            className="flex items-center text-sm text-gray-300 bg-[#1f1f22] px-3 py-1 rounded hover:bg-[#2a2a2d]"
            onClick={handlePrevMonth}
            aria-label="Предыдущий месяц"
          >
            <ChevronLeft className="w-4 h-4" />
          </button>

          <div className="bg-[#1f1f22] text-white px-3 py-1 rounded text-sm flex items-center gap-1 cursor-default select-none">
            {selectedMonth.format("MMMM YYYY")}
          </div>

          <button
            className="text-sm text-gray-300 bg-[#1f1f22] px-3 py-1 rounded hover:bg-[#2a2a2d]"
            onClick={handleNextMonth}
            aria-label="Следующий месяц"
          >
            <ChevronRight className="w-4 h-4" />
          </button>

          <button
            className="ml-4 text-sm px-3 py-1 rounded border border-gray-600 hover:bg-gray-700 flex items-center gap-1"
            onClick={() => {
              setCustomRangeOpen(prev => !prev)
              setYearDropdownOpen(false)
            }}
          >
            <Calendar className="w-4 h-4" />
            Произвольный период
          </button>
        </div>

        {/* Выпадающий календарь */}
        {customRangeOpen && (
          <div ref={customRangeRef} className="absolute z-30 mt-2 rounded shadow-lg bg-[#1a1a1d] border border-gray-700">
            <DateRange
              editableDateInputs={true}
              onChange={item => {
                if (item.selection.startDate && item.selection.endDate) {
                  setCustomRange({
                    startDate: item.selection.startDate,
                    endDate: item.selection.endDate,
                  })
                }
              }}
              moveRangeOnFirstSelection={false}
              ranges={[{
                startDate: customRange.startDate,
                endDate: customRange.endDate,
                key: 'selection'
              }]}
              maxDate={new Date()}
              rangeColors={['#007AFF']}
            />
            <div className="flex justify-end p-2 space-x-2 border-t border-gray-600">
              <button
                className="bg-gray-700 hover:bg-gray-600 px-3 py-1 rounded text-sm"
                onClick={() => setCustomRangeOpen(false)}
              >
                Закрыть
              </button>
              <button
                className="bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded text-sm text-white"
                onClick={() => {
                  setCustomRangeOpen(false)
                  // Здесь можно добавить обновление данных если нужно
                }}
              >
                Применить
              </button>
            </div>
          </div>
        )}

        {/* Статистика */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
          <div className="bg-[#1a1a1d] p-4 rounded-xl">
            <p className="text-sm text-gray-400 flex items-center">
              <Timer className="w-4 h-4 mr-1" /> Total Training
            </p>
            <h2 className="text-xl font-semibold">{totalTimeStr}</h2>
            <p className="text-xs text-gray-500">{filteredWorkouts.length} Sessions</p>
          </div>
          <div className="bg-[#1a1a1d] p-4 rounded-xl">
            <p className="text-sm text-gray-400 flex items-center">
              <MapPin className="w-4 h-4 mr-1" /> Distance
            </p>
            <h2 className="text-xl font-semibold">{totalDistance.toFixed(1)} km</h2>
            <p className="text-xs text-gray-500">
              {filteredWorkouts.filter(w => w.distance).length} Sessions
            </p>
          </div>
          <div className="bg-[#1a1a1d] p-4 rounded-xl">
            <p className="text-sm text-gray-400 flex items-center">
              <Zap className="w-4 h-4 mr-1" /> Intensive
            </p>
            <h2 className="text-xl font-semibold">{intensiveSessions}</h2>
          </div>
          <div className="bg-[#1a1a1d] p-4 rounded-xl">
            <p className="text-sm text-gray-400 flex items-center">
              <Target className="w-4 h-4 mr-1" /> Specific
            </p>
            <h2 className="text-xl font-semibold">1</h2>
          </div>
        </div>

        {/* Графики и таблицы */}
        <div className="grid md:grid-cols-2 gap-6 mt-6">
          <div className="space-y-6">
            <TrainingLoadChart />
            <IntensityZones workouts={filteredWorkouts} />
          </div>
          <div className="space-y-6">
            <WeeklySessions />
            <ActivityTable workouts={filteredWorkouts} />
          </div>
        </div>

        {/* Тренировки */}
        <div>
          {loadingWorkouts ? (
            <p className="text-gray-400">Загрузка тренировок...</p>
          ) : (
            <RecentWorkouts
              workouts={filteredWorkouts}
              onDeleteWorkout={handleDeleteWorkout}
              onUpdateWorkout={fetchWorkouts}
            />
          )}
        </div>
      </div>

      {/* Модалка */}
      <AddWorkoutModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onAddWorkout={handleAddWorkout}
      />
    </div>
  )
}

